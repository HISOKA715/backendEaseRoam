@model IEnumerable<webCore.Models.TripAnalysis.TripAnalysisViewModel>

@{
    Layout = String.Empty;
}
<!DOCTYPE html>
<html>
    <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>
    </head>
<style>
    body{
        width:2000px;
    }

    .content-container {
        display: flex;
        justify-content: space-between; /* Aligns children to the sides */
        align-items: flex-start; /* Aligns children to the top */
        margin-top:100px;
    }

    .table-container {
        flex: 1; /* Allows the table to grow */
        margin-right: 20px; /* Adds some space between the table and the charts */
        margin-top:100px;
    }
    .chart-container {
        display: grid; /* Uses grid layout */
        grid-template-rows: 1fr 1fr; /* Divides the container into two rows */
        gap: 20px; /* Adds space between the charts */
        flex: 1; /* Allows the chart container to grow */
    }

    .table th, .table td {
        text-align: center;
        font-weight: bold;
        border: 1px solid #000; /* Adds a solid black border */
    }

    .table {
        width: 900px; /* Adjust as necessary */
        border-collapse: collapse; /* Ensures borders collapse */
        margin-left: auto;
        margin-right: auto;
    }


    .success {
        color: green !important;
    }

    .fail {
        color: red !important;
    }

    .text0 {
        margin-left: 40px;
        position: relative;
    }

        .text0::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            height: 1px;
            background-color: #ddd;
        }

    .button_click {
        margin-bottom: 50px;
    }
    .center_h1{
        text-align:center;
    }

    .text_company{
        font-size:15px;
        font-weight:bold;
        color: #929292;

    }

    .left-right {
        display: flex;
        justify-content: space-between; /* This will align the children to the start and end of the container */
        align-items: center;
        margin-bottom: 20px; /* Adjust as needed */
    }

    #bar_chart, #pie_chart {
        width: 100%;
    }
</style>

<body>
    
    <div class="left-right">
    <p class="text_company">BOOKING GO TECHNOLOGY</p>
        <p id="myId" class="generate_time"></p>
    </div>
    <div class="center_h1">
    <h1>Overall Trip Analysis Report</h1>
    </div>
    <div class="content-container">
    <div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th>Record</th>
                <th>Area</th>
                <th>Prediction percentage</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @{
                var index = 1; // Initialize counter for record number
            }
            @foreach (var item in Model)
            {
                <tr>
                    <td>@index</td> <!-- Increment record number -->
                    <td>@Html.DisplayFor(modelItem => item.area)</td>
                    <td>@Html.DisplayFor(modelItem => item.percentage)%</td>
                    <!-- Apply the CSS class based on the status -->
                    <td class="@(item.status == "Success" ? "success" : "fail")">@item.status</td>
                </tr>
                index++; // Increment the counter
            }
        </tbody>
    </table>
    </div>
    <div class="chart-container">
        <div id="bar_chart" style="height: 500px;"></div>
        <div id="pie_chart" style="height: 500px;"></div>
    </div>

    </div>
   
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        
        var chartsDrawn = 0;
        const totalCharts = 2;


        google.charts.load('current', { 'packages': ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawCharts);


        function drawCharts() {
            console.log("Drawing charts...");
            drawBarChart();
            drawPieChart();
            setTimeout(chartDrawn, 2000); // Simulate chart drawing delay
        }

       
    
        function drawBarChart() {
            var data = google.visualization.arrayToDataTable([
                ['Area', 'Percentage'],
        @foreach (var item in Model)
        {
            @:['@Html.Raw(item.area)', @Html.Raw(item.percentage)],
        }
                    ]);

            var options = {
                chart: {
                    title: 'Prediction Percentage by Area',
                },
                bars: 'horizontal'
            };

            var chart = new google.charts.Bar(document.getElementById('bar_chart'));
            google.visualization.events.addListener(chart, 'ready', chartDrawn);
            chart.draw(data, google.charts.Bar.convertOptions(options));
        }

        function drawPieChart() {
            var accurate = @Model.Count(m => m.percentage >= 50);
            var notAccurate = @Model.Count(m => m.percentage < 50);

            var data = google.visualization.arrayToDataTable([
                ['Accuracy', 'Count'],
                ['Accurate', accurate],
                ['Not Accurate', notAccurate]
            ]);

            var options = {
                title: 'Overall Accuracy'
            };

            var chart = new google.visualization.PieChart(document.getElementById('pie_chart'));
            google.visualization.events.addListener(chart, 'ready', chartDrawn);
            chart.draw(data, options);
        }

        function chartDrawn() {
            console.log("Charts drawn.");
            chartsDrawn++;
            if (chartsDrawn === totalCharts) {
                // All charts are drawn, now generate the PDF
                setTimeout(generatePDFAndGoBack, 1000);
            }
        }

        function generatePDFAndGoBack() {
            console.log("Generating PDF and navigating back...");
            // Adjust the scale parameter to increase the capture resolution
            html2canvas(document.body, { scale: 2 }).then(function (canvas) {
                // Create a new jsPDF instance
                const pdf = new jspdf.jsPDF({
                    orientation: 'landscape',
                    unit: 'px',
                    format: [4100,2400]
                });
                // Add the canvas to the PDF
                const imgData = canvas.toDataURL('image/png');
                pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);

                // Save the PDF
                pdf.save('trip-analysis-report.pdf');
                setTimeout(() => window.history.back(), 1000); // Adjust delay as necessary
            }).catch(function (error) {
                console.error('Error generating PDF:', error);
            });

            // Note: The check for jsPDF is removed since it's now confirmed to be loaded correctly.
        }


    function onDocumentReady() {
        google.charts.load('current', { 'packages': ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawCharts);

        }

    // Check if the DOMContentLoaded has already been fired
    if (document.readyState === "complete" || document.readyState === "interactive") {
        // Call the function immediately if the document is already ready
        onDocumentReady();
    } else {
        // Otherwise, use the event listener
        document.addEventListener('DOMContentLoaded', onDocumentReady);
    }
        
    </script>
    <script>
        function getMalayMonthName(monthNumber) {
            const monthNames = [
                'Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun',
                'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'
            ];
            return monthNames[monthNumber];
        }

        function formatCurrentDate() {
            const now = new Date();
            const day = now.getDate();
            const monthName = getMalayMonthName(now.getMonth());
            const year = now.getFullYear();
            return `${day} ${monthName} ${year}`;
        }

        // Directly call the displayGeneratedDate function without waiting for DOMContentLoaded
        function displayGeneratedDate() {
            const dateText = 'Generated by ' + formatCurrentDate();
            const generateTimeElement = document.querySelector('.generate_time');
            if (generateTimeElement) {
                generateTimeElement.textContent = dateText;
            }
        }

        displayGeneratedDate();
    </script>
   


</body>
</html>