@using static webCore.Models.TourismAttraction;
@model List<TourismAttractionViewModel>

@{
    ViewData["Title"] = "Tourism Attraction Management";
}

<style>
    .btn-margin-right {
        margin-right: 8px; /* Adjust the margin as needed */
    }

    .btn-container {
        display: flex;
        flex-direction: column; /* Stack buttons vertically */
        align-items: center; /* Center-align buttons horizontally */
        gap: 8px; /* Space between buttons */
    }

    input[type=text]{
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        margin-top: 6px;
        margin-bottom: 16px;
        resize: vertical;
    }

    .search-and-add-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
        margin-bottom: 16px;
    }

    .add-attraction-btn {
        align-self: flex-end;
    }
</style>
<div class="search-and-add-container">
    <input type="text" id="address" placeholder="Search...">
    <select id="searchCategory">
        <option value="name">Name</option>
        <option value="category">Category</option>
        <option value="description">Description</option>
        <option value="state">State</option>
        <option value="postDate">Post Date</option>
    </select>
    <a class="btn btn-success add-attraction-btn" role="button" asp-controller="Firestore" asp-action="addAttraction">Add Attraction</a>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Record</th>
           <th class="sortable" data-sort="name" data-order="asc">Name</th>
<th class="sortable" data-sort="category" data-order="asc">Category</th>
<th class="sortable" data-sort="description" data-order="asc">Description</th>
<th class="sortable" data-sort="state" data-order="asc">State</th>
<th class="sortable" data-sort="postDate" data-order="asc">Post Date</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var attraction in Model)
        {
            <tr>
                <td>
                    <div class="record-flex-container">
                        <span class="record-number">1</span>
                        <img src="@Url.Content(attraction.ImageUrl)" alt="Image" class="record-image">
                    </div>
                </td>
                <td>@attraction.Name</td>
                <td>@attraction.Category</td>
                <td>@attraction.aDescription</td>
                <td>@attraction.State</td>
                <td>@attraction.PostDate</td>
                <td>
                    <div class="btn-container">
                        <a class="edit-btn btn btn-secondary btn-margin-right" 
                        asp-area="" 
                        asp-controller="Firestore"
                       asp-action="getaAttractions"
                       asp-route-id="@attraction.Id" 
                        role="button">Edit</a>
                        <a class="delete-btn btn btn-danger" asp-area=""
                       asp-controller="Firestore"
                       asp-action="DeleteAttraction"
                       asp-route-id="@attraction.Id" role="button">Delete</a>
                    </div>
                </td>
            </tr>   
        }
    </tbody>
</table>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById('address');
        const searchCategorySelect = document.getElementById('searchCategory');
        const tableBody = document.querySelector('.table tbody');

        // Function to perform the search
        function performSearch() {
            const searchCategory = searchCategorySelect.value;
            const searchText = searchInput.value.toLowerCase();

            for (const row of tableBody.rows) {
                let cellText = '';
                switch (searchCategory) {
                    case 'name':
                        cellText = row.cells[1].textContent.toLowerCase();
                        break;
                    case 'category':
                        cellText = row.cells[2].textContent.toLowerCase();
                        break;
                    case 'description':
                        cellText = row.cells[3].textContent.toLowerCase();
                        break;
                    case 'state':
                        cellText = row.cells[4].textContent.toLowerCase();
                        break;
                    case 'postDate':
                        cellText = row.cells[5].textContent.toLowerCase();
                        break;
                    default:
                        cellText = row.cells[1].textContent.toLowerCase();
                        break;
                }
                row.style.display = cellText.includes(searchText) ? '' : 'none';
            }
        }

        // Event listeners for the dropdown and search input
        searchInput.addEventListener('input', performSearch);
        searchCategorySelect.addEventListener('change', performSearch);
    });


    document.addEventListener("DOMContentLoaded", function () {
        const getCellValue = (row, index) => row.cells[index].innerText || row.cells[index].textContent;

        const comparer = (index, asc) => (a, b) => ((v1, v2) =>
            v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, index), getCellValue(asc ? b : a, index));

        // Updates the record numbers in the first column
        const updateRecordNumbers = (tbody) => {
            const rows = tbody.querySelectorAll('tr');
            rows.forEach((row, index) => {
                // Assuming the first cell in each row contains the record number
                const firstCell = row.cells[0].querySelector('.record-number');
                if (firstCell) {
                    firstCell.textContent = index + 1; // Update the record number, starting at 1
                }
            });
        };

        // Function to be called when a sortable th is clicked
        const onThClick = (e) => {
            const th = e.target;
            const table = th.closest('table');
            const tbody = table.querySelector('tbody');
            const index = Array.from(th.parentNode.children).indexOf(th);
            const asc = th.dataset.order === "asc";
            Array.from(tbody.querySelectorAll('tr'))
                .sort(comparer(index, asc))
                .forEach(tr => tbody.appendChild(tr));
            // Toggle the sort order in the dataset for the next click
            th.dataset.order = asc ? "desc" : "asc";
            // Update record numbers after sorting
            updateRecordNumbers(tbody);
        };

        // Attach the click event listener to each sortable th
        document.querySelectorAll('.sortable').forEach(th => {
            th.addEventListener('click', onThClick);
        });

        // Initial call to update record numbers on page load
        const tableBody = document.querySelector('.table tbody');
        updateRecordNumbers(tableBody);
    });
</script>